<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/05/09/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>测试文章</title>
    <url>/2022/05/09/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="芭比Q"><a href="#芭比Q" class="headerlink" title="芭比Q"></a>芭比Q</h2><p>啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊</p>
]]></content>
  </entry>
  <entry>
    <title>RabbitMQ</title>
    <url>/2022/05/10/RabbitMQ/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>@[TOC] </p>
<h1 id="1-消息队列"><a href="#1-消息队列" class="headerlink" title="1. 消息队列"></a>1. 消息队列</h1><h2 id="1-1-MQ的相关概念"><a href="#1-1-MQ的相关概念" class="headerlink" title="1.1. MQ的相关概念"></a>1.1. MQ的相关概念</h2><h3 id="1-1-1-什么是MQ"><a href="#1-1-1-什么是MQ" class="headerlink" title="1.1.1. 什么是MQ"></a>1.1.1. 什么是MQ</h3><p>MQ(message queue)，从字面意思上看，本质是个队列，FIFO 先入先出，只不过队列中存放的内容是message 而已，还是一种跨进程的通信机制，用于上下游传递消息。在互联网架构中，MQ 是一种非常常见的上下游“逻辑解耦+物理解耦”的消息通信服务。使用了 MQ 之后，消息发送上游只需要依赖 MQ，不用依赖其他服务</p>
<h2 id="1-1-2-为什么要用MQ"><a href="#1-1-2-为什么要用MQ" class="headerlink" title="1.1.2. 为什么要用MQ"></a>1.1.2. 为什么要用MQ</h2><p>1.流量消峰<br>举个例子，如果订单系统最多能处理一万次订单，这个处理能力应付正常时段的下单时绰绰有余，正常时段我们下单一秒后就能返回结果。但是在高峰期，如果有两万次下单操作系统是处理不了的，只能限制订单超过一万后不允许用户下单。使用消息队列做缓冲，我们可以取消这个限制，把一秒内下的订单分散成一段时间来处理，这时有些用户可能在下单十几秒后才能收到下单成功的操作，但是比不能下单的体验要好。<br>2.应用解耦<br>以电商应用为例，应用中有订单系统、库存系统、物流系统、支付系统。用户创建订单后，如果耦合调用库存系统、物流系统、支付系统，任何一个子系统出了故障，都会造成下单操作异常。当转变成基于消息队列的方式后，系统间调用的问题会减少很多，比如物流系统因为发生故障，需要几分钟来修复。在这几分钟的时间里，物流系统要处理的内存被缓存在消息队列中，用户的下单操作可以正常完成。当物流系统恢复后，继续处理订单信息即可，中单用户感受不到物流系统的故障，提升系统的可用性。<br><img src="https://img-blog.csdnimg.cn/440d96ac7ad744f6a5b80d7a21cb378f.png" alt="在这里插入图片描述">3.异步处理<br>有些服务间调用是异步的，例如 A 调用 B，B 需要花费很长时间执行，但是 A 需要知道 B 什么时候可以执行完，以前一般有两种方式，A 过一段时间去调用 B 的查询 api 查询。或者 A 提供一个 callback api，B 执行完之后调用 api 通知 A 服务。这两种方式都不是很优雅，使用消息总线，可以很方便解决这个问题，A 调用 B 服务后，只需要监听 B 处理完成的消息，当 B 处理完成后，会发送一条消息给 MQ，MQ 会将此消息转发给 A 服务。这样 A 服务既不用循环调用 B 的查询 api，也不用提供 callback api。同样B 服务也不用做这些操作。A 服务还能及时的得到异步处理成功的消息。</p>
<p><img src="https://img-blog.csdnimg.cn/7a84b9fad63146c4abd7b9b8165a0a06.png" alt="在这里插入图片描述"></p>
<h3 id="1-1-3-MQ-的分类"><a href="#1-1-3-MQ-的分类" class="headerlink" title="1.1.3. MQ 的分类"></a>1.1.3. MQ 的分类</h3><p>几种常见MQ的对比：<br><img src="https://img-blog.csdnimg.cn/c791236c8a9a471592e9092ea951ff88.png" alt="在这里插入图片描述">追求可用性：Kafka、 RocketMQ 、RabbitMQ<br>追求可靠性：RabbitMQ、RocketMQ<br>追求吞吐能力：RocketMQ、Kafka<br>追求消息低延迟：RabbitMQ、Kafka</p>
<h2 id="1-2-RabbitMQ"><a href="#1-2-RabbitMQ" class="headerlink" title="1.2. RabbitMQ"></a>1.2. RabbitMQ</h2><h3 id="1-2-1-RabbitMQ-的概念"><a href="#1-2-1-RabbitMQ-的概念" class="headerlink" title="1.2.1. RabbitMQ 的概念"></a>1.2.1. RabbitMQ 的概念</h3><p>RabbitMQ 是一个消息中间件：它接受并转发消息。你可以把它当做一个快递站点，当你要发送一个包裹时，你把你的包裹放到快递站，快递员最终会把你的快递送到收件人那里，按照这种逻辑 RabbitMQ 是一个快递站，一个快递员帮你传递快件。RabbitMQ 与快递站的主要区别在于，它不处理快件而是接收，存储和转发消息数据。</p>
<h3 id="1-2-2-四大核心概念"><a href="#1-2-2-四大核心概念" class="headerlink" title="1.2.2. 四大核心概念"></a>1.2.2. 四大核心概念</h3><p><strong>生产者</strong><br>产生数据发送消息的程序是生产者</p>
<p><strong>交换机</strong><br>交换机是 RabbitMQ 非常重要的一个部件，一方面它接收来自生产者的消息，另一方面它将消息推送到队列中。交换机必须确切知道如何处理它接收到的消息，是将这些消息推送到特定队列还是推送到多个队列，亦或者是把消息丢弃，这个得有交换机类型决定</p>
<p><strong>队列</strong><br>    队列是 RabbitMQ 内部使用的一种数据结构，尽管消息流经 RabbitMQ 和应用程序，但它们只能存储在队列中。队列仅受主机的内存和磁盘限制的约束，本质上是一个大的消息缓冲区。许多生产者可以将消息发送到一个队列，许多消费者可以尝试从一个队列接收数据。这就是我们使用队列的方式</p>
<p><strong>消费者</strong><br>    消费与接收具有相似的含义。消费者大多时候是一个等待接收消息的程序。请注意生产者，消费者和消息中间件很多时候并不在同一机器上。同一个应用程序既可以是生产者又是可以是消费者。</p>
<h3 id="1-2-3-RabbitMQ-核心部分"><a href="#1-2-3-RabbitMQ-核心部分" class="headerlink" title="1.2.3. RabbitMQ 核心部分"></a>1.2.3. RabbitMQ 核心部分</h3><p>RabbitMQ官方提供了5个不同的Demo示例，对应了不同的消息模型：<br><img src="https://img-blog.csdnimg.cn/b7dc34ae4e7f4147a45e2d0339a6190f.png" alt="在这里插入图片描述"></p>
<h3 id="1-2-4-各个名词介绍"><a href="#1-2-4-各个名词介绍" class="headerlink" title="1.2.4. 各个名词介绍"></a>1.2.4. 各个名词介绍</h3><p><img src="https://img-blog.csdnimg.cn/3d321c15c0a94bb3b20bb025a56b9d15.png" alt="在这里插入图片描述"><strong>Broker</strong>：接收和分发消息的应用，RabbitMQ Server 就是 Message Broker<br><strong>Virtual host</strong>：出于多租户和安全因素设计的，把 AMQP 的基本件划分到一个虚拟的分组中，类似于网络中的 namespace 概念。当多个不同的用户使用同一个 RabbitMQ server 提供的服务时，可以划分出多个 vhost，每个用户在自己的 vhost 创建 exchange／queue 等<br><strong>Connection</strong>：publisher／consumer 和 broker 之间的 TCP 连接<br><strong>Channel</strong>：如果每一次访问 RabbitMQ 都建立一Connection，在消息量大的时候建立 TCPConnection 的开销将是巨大的，效率也较低。Channel 是在 connection 内部建立的逻辑连接，如果应用程序支持多线程，通常每个 thread 创建单独的 channel 进行通讯，AMQP method 包含了 channel id 帮助客户端和 message broker 识别 channel，所以 channel 之间是完全隔离的。Channel 作为轻量级的<em><strong>Connection 极大减少了操作系统建立 TCP connection 的开销</strong></em><br><strong>Exchange</strong>：message 到达 broker 的第一站，根据分发规则，匹配查询表中的 routing key，分发消息到 queue 中去。常用的类型有：direct (point-to-point), topic (publish-subscribe) and fanout(multicast)<br><strong>Queue</strong>：消息最终被送到这里等待 consumer 取走<br><strong>Binding</strong>：exchange 和 queue 之间的虚拟连接，binding 中可以包含 routing key，Binding 信息被保<br>存到 exchange 中的查询表中，用于 message 的分发依据</p>
<h3 id="1-2-5-安装"><a href="#1-2-5-安装" class="headerlink" title="1.2.5. 安装"></a>1.2.5. 安装</h3><h4 id="1-单机部署"><a href="#1-单机部署" class="headerlink" title="1.单机部署"></a>1.单机部署</h4><p>我们在Centos7虚拟机中使用Docker来安装。</p>
<h5 id="1-1-下载镜像"><a href="#1-1-下载镜像" class="headerlink" title="1.1.下载镜像"></a>1.1.下载镜像</h5><p>方式一：在线拉取</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull rabbitmq:<span class="hljs-number">3</span>-management<br></code></pre></td></tr></table></figure>
<p>方式二：从本地加载<br>下载mq.tar安装包，上传到虚拟机中后，使用命令加载镜像即可：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">docker load -<span class="hljs-selector-tag">i</span> mq<span class="hljs-selector-class">.tar</span><br></code></pre></td></tr></table></figure>
<h5 id="1-2-安装MQ"><a href="#1-2-安装MQ" class="headerlink" title="1.2.安装MQ"></a>1.2.安装MQ</h5><p>执行下面的命令来运行MQ容器：</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><code class="hljs livescript">docker run <span class="hljs-string">\</span><br> -e RABBITMQ_DEFAULT_USER=ydj <span class="hljs-string">\</span><br> -e RABBITMQ_DEFAULT_PASS=<span class="hljs-number">123456</span> <span class="hljs-string">\</span><br> --name mq <span class="hljs-string">\</span><br> --hostname mq1 <span class="hljs-string">\</span><br> -p <span class="hljs-number">15672</span>:<span class="hljs-number">15672</span> <span class="hljs-string">\</span><br> -p <span class="hljs-number">5672</span>:<span class="hljs-number">5672</span> <span class="hljs-string">\</span><br> -d <span class="hljs-string">\</span><br> rabbitmq:<span class="hljs-number">3</span>-management<br></code></pre></td></tr></table></figure>
<h4 id="2-集群部署"><a href="#2-集群部署" class="headerlink" title="2.集群部署"></a>2.集群部署</h4><p>接下来，我们看看如何安装RabbitMQ的集群。</p>
<h5 id="2-1-集群分类"><a href="#2-1-集群分类" class="headerlink" title="2.1.集群分类"></a>2.1.集群分类</h5><p>在RabbitMQ的官方文档中，讲述了两种集群的配置方式：</p>
<ul>
<li>普通模式：普通模式集群不进行数据同步，每个MQ都有自己的队列、数据信息（其它元数据信息如交换机等会同步）。例如我们有2个MQ：mq1，和mq2，如果你的消息在mq1，而你连接到了mq2，那么mq2会去mq1拉取消息，然后返回给你。如果mq1宕机，消息就会丢失。</li>
<li>镜像模式：与普通模式不同，队列会在各个mq的镜像节点之间同步，因此你连接到任何一个镜像节点，均可获取到消息。而且如果一个节点宕机，并不会导致数据丢失。不过，这种方式增加了数据同步的带宽消耗。</li>
</ul>
<p>  <strong>我们先来看普通模式集群。</strong></p>
<h5 id="2-2-设置网络"><a href="#2-2-设置网络" class="headerlink" title="2.2.设置网络"></a>2.2.设置网络</h5><p>首先，我们需要让3台MQ互相知道对方的存在。<br>分别在3台机器中，设置 /etc/hosts文件，添加如下内容：</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">192.168.150.101</span> mq1<br><span class="hljs-number">192.168.150.102</span> mq2<br><span class="hljs-number">192.168.150.103</span> mq3<br></code></pre></td></tr></table></figure>
<p>并在每台机器上测试，是否可以ping通对方：</p>
<h1 id="2-Hello-World"><a href="#2-Hello-World" class="headerlink" title="2. Hello World"></a>2. Hello World</h1><p>在本教程的这一部分中，我们将用 Java 编写两个程序。发送单个消息的生产者和接收消息并打印<br>出来的消费者。我们将介绍 Java API 中的一些细节。在下图中，“ P”是我们的生产者，“ C”是我们的消费者。中间的框是一个队列-RabbitMQ 代表使用者保留的消息缓冲区<br>     <img src="https://img-blog.csdnimg.cn/28d994be7ccf4b5db58700d917af274f.png" alt="在这里插入图片描述"></p>
<h2 id="2-1-API代码"><a href="#2-1-API代码" class="headerlink" title="2.1 API代码"></a>2.1 API代码</h2><p>pom文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs pom">&lt;dependencies&gt;<br>        &lt;!--rabbitmq 依赖客户端--&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;com.rabbitmq&lt;/groupId&gt;<br>            &lt;artifactId&gt;amqp-client&lt;/artifactId&gt;<br>            &lt;version&gt;5.8.0&lt;/version&gt;<br>        &lt;/dependency&gt;<br>        &lt;!--操作文件流的一个依赖--&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;commons-io&lt;/groupId&gt;<br>            &lt;artifactId&gt;commons-io&lt;/artifactId&gt;<br>            &lt;version&gt;2.6&lt;/version&gt;<br>        &lt;/dependency&gt;<br>    &lt;/dependencies&gt;<br>    &lt;!--指定 jdk 编译版本--&gt;<br>    &lt;build&gt;<br>        &lt;plugins&gt;<br>            &lt;plugin&gt;<br>                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;<br>                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;<br>                &lt;configuration&gt;<br>                    &lt;source&gt;8&lt;/source&gt;<br>                    &lt;target&gt;8&lt;/target&gt;<br>                &lt;/configuration&gt;<br>            &lt;/plugin&gt;<br>        &lt;/plugins&gt;<br>    &lt;/build&gt;<br></code></pre></td></tr></table></figure>
<p>消费者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Consumer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String QUEUE_NAME= <span class="hljs-string">&quot;hello&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException &#123;<br>        <span class="hljs-comment">//创建连接工厂</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        factory.setHost(<span class="hljs-string">&quot;192.168.80.130&quot;</span>);<br>        factory.setUsername(<span class="hljs-string">&quot;ydj&quot;</span>);<br>        factory.setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> factory.newConnection();<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br>        System.out.println(<span class="hljs-string">&quot;等待消息接收&quot;</span>);<br>        <span class="hljs-comment">//推送的消息如何进行消费的接口回调</span><br>        <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">deliverCallback</span> <span class="hljs-operator">=</span> (consumerTag,delivery)-&gt;&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(delivery.getBody());<br>            System.out.println(message);<br>        &#125;;<br>        <span class="hljs-comment">//取消消费的一个回调接口 如在消费的时候队列被删除掉了</span><br>        <span class="hljs-type">CancelCallback</span> <span class="hljs-variable">cancelCallback</span> <span class="hljs-operator">=</span> (consumerTag)-&gt;&#123;<br>            System.out.println(<span class="hljs-string">&quot;消息消费被中断&quot;</span>);<br>        &#125;;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 消费者消费消息</span><br><span class="hljs-comment">         * 1.消费哪个队列</span><br><span class="hljs-comment">         * 2.消费成功之后是否要自动应答 true 代表自动应答 false 手动应答</span><br><span class="hljs-comment">         * 3.消费者未成功消费的回调</span><br><span class="hljs-comment">         */</span><br>        channel.basicConsume(QUEUE_NAME, <span class="hljs-literal">true</span>, deliverCallback, cancelCallback);<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>生产者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Producer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String QUEUE_NAME= <span class="hljs-string">&quot;hello&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException &#123;<br>        <span class="hljs-comment">//创建连接工厂</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        factory.setHost(<span class="hljs-string">&quot;192.168.80.130&quot;</span>);<br>        factory.setUsername(<span class="hljs-string">&quot;ydj&quot;</span>);<br>        factory.setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> factory.newConnection();<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 生成一个队列</span><br><span class="hljs-comment">         * 1.队列名称</span><br><span class="hljs-comment">         * 2.队列里面的消息是否持久化 默认消息存储在内存中</span><br><span class="hljs-comment">         * 3.该队列是否只供一个消费者进行消费 是否进行共享 true 可以多个消费者消费</span><br><span class="hljs-comment">         * 4.是否自动删除 最后一个消费者端开连接以后 该队列是否自动删除 true 自动删除</span><br><span class="hljs-comment">         * 5.其他参数</span><br><span class="hljs-comment">         */</span><br>        channel.queueDeclare(QUEUE_NAME,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">null</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello,world&quot;</span>;<br><br>        channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>, QUEUE_NAME, <span class="hljs-literal">null</span>, message.getBytes());<br>        System.out.println(<span class="hljs-string">&quot;发送完毕&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="2-2-注解式开发"><a href="#2-2-注解式开发" class="headerlink" title="2.2 注解式开发"></a>2.2 注解式开发</h2><p>pom</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs pom">&lt;dependency&gt;<br>           &lt;groupId&gt;org.springframework.amqp&lt;/groupId&gt;<br>           &lt;artifactId&gt;spring-rabbit-test&lt;/artifactId&gt;<br>           &lt;scope&gt;test&lt;/scope&gt;<br>       &lt;/dependency&gt;<br></code></pre></td></tr></table></figure>
<p>yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">ydj</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span> <span class="hljs-comment"># 端口</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.80</span><span class="hljs-number">.130</span> <span class="hljs-comment"># 主机名</span><br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/</span>  <span class="hljs-comment"># 虚拟主机</span><br></code></pre></td></tr></table></figure>
<p>测试类中消息发送</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoApplicationTests</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    RabbitTemplate rabbitTemplate;<br>    <span class="hljs-comment">//生产者</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSimpleQueuePublishers</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello,rabbitMQ&quot;</span>;<br>        rabbitTemplate.convertAndSend(queueName, message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>接收消息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringRabbitListener</span> &#123;<br>    <span class="hljs-meta">@RabbitListener(queues = &quot;hello&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenSimpleQueueMessage</span><span class="hljs-params">(String message)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;接收到的消息：&quot;</span>+message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="2-3总结"><a href="#2-3总结" class="headerlink" title="2.3总结"></a>2.3总结</h2><p>SpringAMQP如何发送消息？</p>
<ol>
<li>引入amqp的starter依赖</li>
<li>配置RabbitMQ地址</li>
<li>利用RabbitTemplate的convertAndSend方法</li>
</ol>
<p> SpringAMQP如何接收消息？</p>
<ul>
<li>引入amqp的starter依赖</li>
<li>配置RabbitMQ地址</li>
<li>定义类，添加@Component注解类中声明方法，添加@RabbitListener注解，方法参数就时消息<br>注意：消息一旦消费就会从队列删除，RabbitMQ没有消息回溯功能<h1 id="3-Work-Queues"><a href="#3-Work-Queues" class="headerlink" title="3. Work Queues"></a>3. Work Queues</h1>工作队列(又称任务队列)的主要思想是避免立即执行资源密集型任务，而不得不等待它完成。相反我们安排任务在之后执行。我们把任务封装为消息并将其发送到队列。在后台运行的工作进程将弹出任务并最终执行作业。当有多个工作线程时，这些工作线程将一起处理这些任务。<h2 id="3-1-轮循分发消息"><a href="#3-1-轮循分发消息" class="headerlink" title="3.1. 轮循分发消息"></a>3.1. 轮循分发消息</h2>在这个案例中我们会启动两个工作线程，一个消息发送线程，我们来看看他们两个工作线程是如何工作的。</li>
</ul>
<p><strong>消费者</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Work01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span>  <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitUtil.getChannel();<br>       <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">deliverCallback</span> <span class="hljs-operator">=</span> (consumerTag,delivery)-&gt;&#123;<br>           System.out.println(<span class="hljs-string">&quot;接收到消息：&quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(delivery.getBody()));<br>       &#125;;<br>        <span class="hljs-type">CancelCallback</span> <span class="hljs-variable">cancelCallback</span> <span class="hljs-operator">=</span> (consumerTag)-&gt;&#123;<br>            System.out.println(consumerTag+<span class="hljs-string">&quot;消费者取消消费接口调用逻辑&quot;</span>);<br>        &#125;;<br>        System.out.println(<span class="hljs-string">&quot;c2等待接收消息......&quot;</span>);<br>        channel.basicConsume(QUEUE_NAME,<span class="hljs-literal">true</span>,deliverCallback,cancelCallback);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>开启2个work</strong><br><img src="https://img-blog.csdnimg.cn/186cb4138ab24b72a6f82c7ed0bb01b4.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/9068ca9706ea4fc18264f8413a889df2.png" alt="在这里插入图片描述"><br>修改代码运行即可<br><strong>生产者</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Task01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span>  <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitUtil.getChannel();<br><span class="hljs-comment">//        channel.queueDeclare(QUEUE_NAME, false, false, false, null);</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span> (scanner.hasNext()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> scanner.next();<br>            channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>,QUEUE_NAME,<span class="hljs-literal">null</span>,message.getBytes());<br>            System.out.println(<span class="hljs-string">&quot;发送消息完成&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="3-1-4-结果展示"><a href="#3-1-4-结果展示" class="headerlink" title="3.1.4. 结果展示"></a>3.1.4. 结果展示</h3><p>通过程序执行发现生产者总共发送 4 个消息，消费者 1 和消费者 2 分别分得两个消息，并且是按照有序的一个接收一次消息<br><img src="https://img-blog.csdnimg.cn/3f89d4ee6be34e23b8e6f8892626db1e.png" alt="在这里插入图片描述"></p>
<h2 id="3-2-消息应答"><a href="#3-2-消息应答" class="headerlink" title="3.2. 消息应答"></a>3.2. 消息应答</h2><h3 id="3-2-1-概念"><a href="#3-2-1-概念" class="headerlink" title="3.2.1. 概念"></a>3.2.1. 概念</h3><p>消费者完成一个任务可能需要一段时间，如果其中一个消费者处理一个长的任务并仅只完成了部分突然它挂掉了，会发生什么情况。RabbitMQ 一旦向消费者传递了一条消息，便立即将该消息标记为删除。在这种情况下，突然有个消费者挂掉了，我们将丢失正在处理的消息。以及后续发送给该消费这的消息，因为它无法接收到。<br>为了保证消息在发送过程中不丢失，rabbitmq 引入消息应答机制，<strong>消息应答就是:消费者在接收到消息并且处理该消息之后，告诉 rabbitmq 它已经处理了，rabbitmq 可以把该消息删除了。</strong></p>
<h3 id="3-2-2-自动应答"><a href="#3-2-2-自动应答" class="headerlink" title="3.2.2. 自动应答"></a>3.2.2. 自动应答</h3><p>消息发送后立即被认为已经传送成功，这种模式需要在<strong>高吞吐量和数据传输安全性方面做权衡</strong>,因为这种模式如果消息在接收到之前，消费者那边出现连接或者 channel 关闭，那么消息就丢失 了,当然另一方面这种模式消费者那边可以传递过载的消息，<strong>没有对传递的消息数量进行限制</strong>，当然这样有可能使得消费者这边由于接收太多还来不及处理的消息，导致这些消息的积压，最终使得内存耗尽，最终这些消费者线程被操作系统杀死，<strong>所以这种模式仅适用在消费者可以高效并以某种速率能够处理这些消息的情况下使用。</strong></p>
<h3 id="3-2-3-消息应答的方法"><a href="#3-2-3-消息应答的方法" class="headerlink" title="3.2.3. 消息应答的方法"></a>3.2.3. 消息应答的方法</h3><ul>
<li>Channel.basicAck(用于肯定确认)<br> RabbitMQ 已知道该消息并且成功的处理消息，可以将其丢弃了</li>
<li>Channel.basicNack(用于否定确认) </li>
<li>Channel.basicReject(用于否定确认)<br>与 Channel.basicNack 相比少一个参数<br> 不处理该消息了直接拒绝，可以将其丢弃了<h3 id="3-2-4-Multiple-的解释"><a href="#3-2-4-Multiple-的解释" class="headerlink" title="3.2.4. Multiple 的解释"></a>3.2.4. Multiple 的解释</h3></li>
</ul>
<p><strong>手动应答的好处是可以批量应答并且减少网络拥堵</strong><br><img src="https://img-blog.csdnimg.cn/17acbb77362543878ae867624d470e1e.png" alt="在这里插入图片描述">multiple 的 true 和 false 代表不同意思<br>true 代表批量应答 channel 上未应答的消息<br>比如说 channel 上有传送 tag 的消息 5,6,7,8 当前 tag 是8 那么此时5-8 的这些还未应答的消息都会被确认收到消息应答<br>false 同上面相比只会应答 tag=8 的消息 5,6,7 这三个消息依然不会被确认收到消息应答<br><img src="https://img-blog.csdnimg.cn/6cd442a9a3f249129d1cda437c8bbe76.png" alt="在这里插入图片描述"></p>
<h3 id="3-2-5-消息自动重新入队"><a href="#3-2-5-消息自动重新入队" class="headerlink" title="3.2.5. 消息自动重新入队"></a>3.2.5. 消息自动重新入队</h3><p>如果消费者由于某些原因失去连接(其通道已关闭，连接已关闭或 TCP 连接丢失)，导致消息未发送 ACK 确认，RabbitMQ 将了解到消息未完全处理，并将对其重新排队。如果此时其他消费者可以处理，它将很快将其重新分发给另一个消费者。这样，即使某个消费者偶尔死亡，也可以确保不会丢失任何消息。<br><img src="https://img-blog.csdnimg.cn/18b8f91946384a97bcb1caa16b203f26.png" alt="在这里插入图片描述"></p>
<h3 id="3-2-6-消息手动应答代码"><a href="#3-2-6-消息手动应答代码" class="headerlink" title="3.2.6. 消息手动应答代码"></a>3.2.6. 消息手动应答代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Work</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span>  <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> RabbitUtil.getChannel();<br>        System.out.println(<span class="hljs-string">&quot;c1处理快&quot;</span>);<br>        <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">deliverCallback</span> <span class="hljs-operator">=</span> (consumerTag, message)-&gt;&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;接收到消息：&quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(message.getBody()));<br>            <span class="hljs-comment">//手动应答</span><br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             *  1.消息的标记 tag</span><br><span class="hljs-comment">             *  2. 是否批量应答</span><br><span class="hljs-comment">             */</span><br>            channel.basicAck(message.getEnvelope().getDeliveryTag(),<span class="hljs-literal">false</span>);<br>        &#125;;<br>        channel.basicConsume(QUEUE_NAME,<span class="hljs-literal">false</span>,deliverCallback,(consumerTag)-&gt;&#123;<br>            System.out.println(consumerTag+<span class="hljs-string">&quot;消费取消调用接口&quot;</span>);<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="3-3-RabbitMQ-持久化"><a href="#3-3-RabbitMQ-持久化" class="headerlink" title="3.3. RabbitMQ 持久化"></a>3.3. RabbitMQ 持久化</h2><h3 id="3-3-1-概念"><a href="#3-3-1-概念" class="headerlink" title="3.3.1. 概念"></a>3.3.1. 概念</h3><p>刚刚我们已经看到了如何处理任务不丢失的情况，但是如何保障当 RabbitMQ 服务停掉以后消息生产者发送过来的消息不丢失。默认情况下 RabbitMQ 退出或由于某种原因崩溃时，它忽视队列和消息，除非告知它不要这样做。确保消息不会丢失需要做两件事：<strong>我们需要将队列和消息都标记为持久化。</strong></p>
<h3 id="3-3-2-队列如何实现持久化"><a href="#3-3-2-队列如何实现持久化" class="headerlink" title="3.3.2. 队列如何实现持久化"></a>3.3.2. 队列如何实现持久化</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//是否持久化队列</span><br>      <span class="hljs-type">boolean</span> <span class="hljs-variable">durable</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>      channel.queueDeclare(<span class="hljs-string">&quot;队列名称&quot;</span>,durable,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">null</span>);<br></code></pre></td></tr></table></figure>
<p>但是需要注意的就是如果之前声明的队列不是持久化的，需要把原先队列先删除，或者重新创建一个持久化的队列，不然就会出现错误</p>
<p>以下为控制台中持久化与非持久化队列的 UI 显示区<br><img src="https://img-blog.csdnimg.cn/f1cc2a668e114d5e8e4d35c7c85a2ea0.png" alt="在这里插入图片描述">这个时候即使重启 rabbitmq 队列也依然存在</p>
<h3 id="3-3-3-消息实现持久化"><a href="#3-3-3-消息实现持久化" class="headerlink" title="3.3.3. 消息实现持久化"></a>3.3.3. 消息实现持久化</h3><p>要想让消息实现持久化需要在生产者中修改代码，MessageProperties.PERSISTENT_TEXT_PLAIN 添加这个属性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//消息持久化 保存到磁盘，第三个参数</span><br>           channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>,QUEUE_NAME, MessageProperties.PERSISTENT_TEXT_PLAIN,message.getBytes());<br>           <br></code></pre></td></tr></table></figure>
<h3 id="3-3-4-不公平分发"><a href="#3-3-4-不公平分发" class="headerlink" title="3.3.4. 不公平分发"></a>3.3.4. 不公平分发</h3><p>在最开始的时候我们学习到 RabbitMQ 分发消息采用的轮训分发，但是在某种场景下这种策略并不是很好，比方说有两个消费者在处理任务，其中有个消费者 1 处理任务的速度非常快，而另外一个消费者 2处理速度却很慢，这个时候我们还是采用轮训分发的化就会到这处理速度快的这个消费者很大一部分时间处于空闲状态，而处理慢的那个消费者一直在干活，这种分配方式在这种情况下其实就不太好，但是RabbitMQ 并不知道这种情况它依然很公平的进行分发。<br>为了避免这种情况，我们可以在消费者中设置参数 channel.basicQos(1);</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//设置不公平分发</span><br>      <span class="hljs-type">int</span> <span class="hljs-variable">prefetchCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>      channel.basicQos(prefetchCount);<br></code></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/b76b0653072e4108b2a34c74b2b354f6.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/704391b2ae4549e29b8c8874b357d755.png" alt="在这里插入图片描述">意思就是如果这个任务我还没有处理完或者我还没有应答你，你先别分配给我，我目前只能处理一个任务，然后 rabbitmq 就会把该任务分配给没有那么忙的那个空闲消费者，当然如果所有的消费者都没有完成手上任务，队列还在不停的添加新任务，队列有可能就会遇到队列被撑满的情况，这个时候就只能添加新的 worker 或者改变其他存储任务的策略。</p>
<h3 id="3-3-5-预取值"><a href="#3-3-5-预取值" class="headerlink" title="3.3.5. 预取值"></a>3.3.5. 预取值</h3><p>本身消息的发送就是异步发送的，所以在任何时候，channel 上肯定不止只有一个消息另外来自消费者的手动确认本质上也是异步的。因此这里就存在一个未确认的消息缓冲区，因此希望开发人员能限制此<br>缓冲区的大小，以避免缓冲区里面无限制的未确认消息问题。这个时候就可以通过使用basic.qos 方法设置“预取计数”值来完成的。该值定义通道上允许的未确认消息的最大数量。一旦数量达到配置的数量，RabbitMQ 将停止在通道上传递更多消息，除非至少有一个未处理的消息被确认，例如，假设在通道上有<br>未确认的消息 5、6、7，8，并且通道的预取计数设置为 4，此时RabbitMQ 将不会在该通道上再传递任何消息，除非至少有一个未应答的消息被 ack。比方说 tag=6 这个消息刚刚被确认 ACK，RabbitMQ 将会感知这个情况到并再发送一条消息。消息应答和 QoS 预取值对用户吞吐量有重大影响。通常，增加预取将提高向消费者传递消息的速度。虽然自动应答传输消息速率是最佳的，但是，在这种情况下已传递但尚未处理<br>的消息的数量也会增加，从而增加了消费者的 RAM 消耗(随机存取存储器)应该小心使用具有无限预处理的自动确认模式或手动确认模式，消费者消费了大量的消息如果没有确认的话，会导致消费者连接节点的内存消耗变大，所以找到合适的预取值是一个反复试验的过程，不同的负载该值取值也不同 100 到 300 范围内的值通常可提供最佳的吞吐量，并且不会给消费者带来太大的风险。预取值为 1 是最保守的。当然这将使吞吐量变得很低，特别是消费者连接延迟很严重的情况下，特别是在消费者连接等待时间较长的环境中。对于大多数应用来说，稍微高一点的值将是最佳的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//消费者设置预取值</span><br>       <span class="hljs-type">int</span> <span class="hljs-variable">prefetchCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<span class="hljs-comment">//可以为其他数字</span><br>       channel.basicQos(prefetchCount);<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>rabbitmq</tag>
        <tag>微服务</tag>
      </tags>
  </entry>
</search>
